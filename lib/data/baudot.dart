import 'package:orbit/data/bit_buffer.dart';

// Each 5-bit code maps to 6 possible bytes:
//   - index 0: letters uppercase
//   - index 1: letters lowercase
//   - index 2: figures
class BaudotDecoder {
  // Flattened 32x6 table (code * 6 + variantIndex)
  static const List<int> _table = <int>[
    0x00, 0x00, 0x00, 0xC0, 0xE0, 0x22,
    // 1
    0x45, 0x65, 0x33, 0xC1, 0xE1, 0x3B,
    // 2
    0x00, 0x00, 0x2B, 0xC2, 0xE2, 0x3C,
    // 3
    0x41, 0x61, 0x2D, 0xC3, 0xE3, 0x3D,
    // 4
    0x20, 0x20, 0x20, 0xC4, 0xE4, 0x3E,
    // 5
    0x53, 0x73, 0x27, 0xC5, 0xE5, 0x5B,
    // 6
    0x49, 0x69, 0x38, 0xC6, 0xE6, 0x5C,
    // 7
    0x55, 0x75, 0x37, 0xC7, 0xE7, 0x5D,
    // 8
    0x0A, 0x0A, 0x0D, 0xC8, 0xE8, 0x5E,
    // 9
    0x44, 0x64, 0x24, 0xC9, 0xE9, 0x5F,
    // 10
    0x52, 0x72, 0x34, 0xCA, 0xEA, 0x60,
    // 11
    0x4A, 0x6A, 0x2A, 0xCB, 0xEB, 0x7B,
    // 12
    0x4E, 0x6E, 0x2C, 0xCC, 0xEC, 0x7C,
    // 13
    0x46, 0x66, 0x21, 0xCD, 0xED, 0x7D,
    // 14
    0x43, 0x63, 0x3A, 0xCE, 0xEE, 0x7E,
    // 15
    0x4B, 0x6B, 0x28, 0xCF, 0xEF, 0xAB,
    // 16
    0x54, 0x74, 0x35, 0xBC, 0xBD, 0xBB,
    // 17
    0x5A, 0x7A, 0x25, 0xD1, 0xF1, 0xA2,
    // 18
    0x4C, 0x6C, 0x29, 0xD2, 0xF2, 0x00,
    // 19
    0x57, 0x77, 0x32, 0xD3, 0xF3, 0x00,
    // 20
    0x48, 0x68, 0x23, 0xD4, 0xF4, 0x00,
    // 21
    0x59, 0x79, 0x36, 0xD5, 0xF5, 0x00,
    // 22
    0x50, 0x70, 0x30, 0xD6, 0xF6, 0x00,
    // 23
    0x51, 0x71, 0x31, 0xA1, 0xBF, 0x00,
    // 24
    0x4F, 0x6F, 0x39, 0xD8, 0xF8, 0x00,
    // 25
    0x42, 0x62, 0x3F, 0xD9, 0xF9, 0x00,
    // 26
    0x47, 0x67, 0x26, 0xDA, 0xFA, 0x00,
    // 27
    0x00, 0x00, 0x00, 0xDB, 0xFB, 0x00,
    // 28
    0x4D, 0x6D, 0x2E, 0xDC, 0xFC, 0x00,
    // 29
    0x58, 0x78, 0x2F, 0xDD, 0xFD, 0x00,
    // 30
    0x56, 0x76, 0x40, 0xA9, 0xAE, 0x00,
    // 31
    0x00, 0x00, 0x00, 0xDF, 0xFF, 0x00,
  ];

  // Decodes exactly 5-bit codes from the bit buffer, emitting up to maxChars
  // preserves bit alignment for subsequent fields
  static String decodeFixed(BitBuffer b, int symbols, int maxChars) {
    final List<int> out = <int>[];

    int figuresMode = 0; // 0=letters, 1=figures
    int caseToggle = 0; // 0=upper, 1=lower (letters only)

    for (int i = 0; i < symbols; i++) {
      final int code = b.readBits(5);
      if (code == 0) {
        // NUL terminator: stop consuming further symbols
        break;
      }

      if (code == 0x02 && figuresMode != 1) {
        // Toggle case in letters mode
        caseToggle = 1 - caseToggle;
        continue;
      }

      if (code == 0x1F) {
        // Toggle figures/letters mode
        figuresMode = figuresMode == 1 ? 0 : 1;
        continue;
      }

      int variantIndex = figuresMode == 1 ? 2 : caseToggle; // 0,1,2
      int actualCode = code;

      if (code == 0x1B) {
        // Extended, read next 5-bit symbol and use extended columns
        actualCode = b.readBits(5);
        variantIndex += 3;
      }

      final int tableIndex = (actualCode & 31) * 6 + variantIndex;
      if (tableIndex < 0 || tableIndex >= _table.length) {
        continue;
      }
      final int ch = _table[tableIndex];
      if (ch != 0 && out.length < maxChars) {
        out.add(ch);
      }
    }

    return String.fromCharCodes(out);
  }

  // Backwards-compatible helper
  static String decode(BitBuffer b, int maxChars) {
    return decodeFixed(b, maxChars, maxChars);
  }
}
